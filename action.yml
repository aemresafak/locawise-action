name: 'locawise'
description: 'Localizes applications using locawise'
branding:
  icon: 'globe'
  color: 'blue'
inputs:
  openai-api-key:
    description: 'OpenAI API key if you are using the GPT models'
    required: false
    default: ''
  vertex-ai-service-account-key-base64:
    description: 'Vertex AI service account key in base64 format if you are using a model from Vertex AI'
    required: false
    default: ''
  source-lang-code:
    description: 'The language code of your primary language file (e.g., en).'
    required: true
  file-name-pattern:
    description: 'How your language files are named. {language} is replaced by the language code (e.g., en, tr).'
    required: true
  target-lang-codes:
    description: 'A comma-separated list of language codes you want to translate into (e.g., es,fr,de).'
    required: true
  localization-root-path:
    description: 'Path to the directory containing your language files (relative to repo root).'
    required: false
    default: ''
  context:
    description: 'Detailed instructions for the AI about your application, tone, style, and target audience.'
    required: false
    default: ''
  glossary: # User should provide a YAML formatted string for the dictionary content
    description: 'Define specific terms and their required translations (YAML formatted string e.g., "term1: translation1\nterm2: translation2").'
    required: false
    default: ''
  tone:
    description: 'A description of the desired tone (e.g., "Formal", "Playful", "Professional but friendly").'
    required: false
    default: ''
  llm-model:
    description: 'The specific model name from the provider (e.g., gpt-4o, gemini-1.5-flash). If omitted, locawise will use a default.'
    required: false
    default: ''
  llm-location:
    description: 'The geographic location or region for the LLM API endpoint, if applicable (e.g., for Vertex AI).'
    required: false
    default: ''
outputs:
  vertex-ai-service-account-key:
    description: 'Decoded Vertex AI service account key'
    value: ${{ steps.decode-key.outputs.decoded_key }}
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    - name: Create i18n.yaml
      shell: bash
      env:
        INPUT_SOURCE_LANG_CODE: ${{ inputs.source-lang-code }}
        INPUT_FILE_NAME_PATTERN: ${{ inputs.file-name-pattern }}
        INPUT_TARGET_LANG_CODES: ${{ inputs.target-lang-codes }}
        INPUT_LOCALIZATION_ROOT_PATH: ${{ inputs.localization-root-path }}
        INPUT_CONTEXT: ${{ inputs.context }}
        INPUT_GLOSSARY: ${{ inputs.glossary }}
        INPUT_TONE: ${{ inputs.tone }}
        INPUT_LLM_MODEL: ${{ inputs.llm-model }}
        INPUT_LLM_LOCATION: ${{ inputs.llm-location }}
      run: |
        # Create or overwrite i18n.yaml with the version
        printf "version: v1.0\n" > i18n.yaml

        # Append other configurations
        printf "source-lang-code: %s\n" "$INPUT_SOURCE_LANG_CODE" >> i18n.yaml
        printf "file-name-pattern: %s\n" "$INPUT_FILE_NAME_PATTERN" >> i18n.yaml

        echo "target-lang-codes:" >> i18n.yaml
        # Safely read comma-separated lang codes
        IFS=',' read -ra LANG_CODES_ARRAY <<< "$INPUT_TARGET_LANG_CODES"
        for lang_code in "${LANG_CODES_ARRAY[@]}"; do
          # Trim whitespace from lang_code (e.g., if input is "en, fr, de")
          trimmed_lang_code=$(echo "$lang_code" | awk '{$1=$1};1') # awk is robust for trimming
          if [[ -n "$trimmed_lang_code" ]]; then # Only add if not empty after trim
             printf "  - %s\n" "$trimmed_lang_code" >> i18n.yaml
          fi
        done

        if [[ -n "$INPUT_LOCALIZATION_ROOT_PATH" ]]; then
          printf "localization-root-path: %s\n" "$INPUT_LOCALIZATION_ROOT_PATH" >> i18n.yaml
        fi

        if [[ -n "$INPUT_CONTEXT" ]]; then
          echo "context: |" >> i18n.yaml
          # Correctly indent multi-line context, ensuring each line is processed
          printf "%s\n" "$INPUT_CONTEXT" | sed 's/^/  /' >> i18n.yaml
        fi

        if [[ -n "$INPUT_GLOSSARY" ]]; then
          echo "glossary:" >> i18n.yaml
          # Correctly indent multi-line glossary (input should be YAML-formatted content)
          printf "%s\n" "$INPUT_GLOSSARY" | sed 's/^/  /' >> i18n.yaml
        else
          # If glossary input is empty, provide an empty YAML mapping
          echo "glossary: {}" >> i18n.yaml
        fi

        if [[ -n "$INPUT_TONE" ]]; then
          printf "tone: %s\n" "$INPUT_TONE" >> i18n.yaml
        fi

        if [[ -n "$INPUT_LLM_MODEL" ]]; then
          printf "llm-model: %s\n" "$INPUT_LLM_MODEL" >> i18n.yaml
        fi

        if [[ -n "$INPUT_LLM_LOCATION" ]]; then
          printf "llm-location: %s\n" "$INPUT_LLM_LOCATION" >> i18n.yaml
        fi

    - name: Decode Vertex AI Service Account Key for Vertex AI
      id: decode-key
      env:
        VERTEX_AI_SERVICE_ACCOUNT_KEY_BASE64: ${{ inputs.vertex-ai-service-account-key-base64 }}
      if: env.VERTEX_AI_SERVICE_ACCOUNT_KEY_BASE64 != '' # Note: Using env context for if condition
      run: |
        DECODED_KEY=$(echo "$VERTEX_AI_SERVICE_ACCOUNT_KEY_BASE64" | tr -d '\n' | base64 --decode)
        echo "decoded_key<<EOF" >> $GITHUB_OUTPUT
        echo "$DECODED_KEY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash
    - name: Authenticate to Google Cloud for VertexAI
      env:
        VERTEX_AI_SERVICE_ACCOUNT_KEY_BASE64: ${{ inputs.vertex-ai-service-account-key-base64 }}
      if: env.VERTEX_AI_SERVICE_ACCOUNT_KEY_BASE64 != '' # Note: Using env context for if condition
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ steps.decode-key.outputs.decoded_key }}



    - name: Set up locawise
      run: pip3 install locawise -q --disable-pip-version-check
      shell: bash


    - name: Run locawise
      run: python3 -m locawise i18n.yaml
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}



    - name: Clean up
      if: always() # Always run cleanup
      run: |
        echo "Cleaning up temporary files..."
        rm -f i18n.yaml
        rm -rf locawise
        if [[ -n "$GOOGLE_APPLICATION_CREDENTIALS" && -f "$GOOGLE_APPLICATION_CREDENTIALS" ]]; then
           rm -f "$GOOGLE_APPLICATION_CREDENTIALS"
         fi
        echo "Cleanup complete."
      shell: bash
